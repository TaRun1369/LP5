# -*- coding: utf-8 -*-
"""DL4_k.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A3lQKDhk6rKkhXdb0Fh-uvkCJZ56GL2B
"""

import numpy as np
import pandas as pd

data = pd.read_csv("/content/goog (1).csv")

data

df = data["Close"].values.reshape(-1,1)

df

from sklearn.preprocessing import MinMaxScaler

mms = MinMaxScaler(feature_range=(0,1))
df = mms.fit_transform(df)

size = int(len(df)*0.8)
train = df[:size,:]
test = df[size:,:]

def create_dataset(data,step = 4):
  x = []
  y = []
  for i in range(len(data) - step):
    seq = data[i:i+step,0]
    target = data[i + step,0]
    x.append(seq)
    y.append(target)
  return np.array(x),np.array(y)

x_train,y_train = create_dataset(train,4)
x_test,y_test = create_dataset(test,4)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM , Dense

model = Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(4,1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss = 'mse',metrics = ['mse','mae'],optimizer = 'adam')
model.summary()

model.fit(x_train,y_train,epochs = 51)

model.evaluate(x_test,y_test)

y_pred=mms.inverse_transform(model.predict(x_test))
y_test=mms.inverse_transform(np.array(y_test).reshape(-1,1))

import matplotlib.pyplot as plt
plt.plot(y_test, label='Actual Price')

# Plotting the predicted prices
plt.plot(y_pred, label='Predicted Price')

plt.title('Actual vs Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()

